@page "/order"
@using Services;
@using Dto;
@using Microsoft.AspNetCore.Components;
@inject IOrderListService OrderService
@inject NavigationManager NavigationManager
<div aria-label="order-toolbar">
    <button type="button" @onclick="@( e => ShowModelForm(true))" class="btn btn-sm btn-primary"><i class="fa icon-btn fa-plus" aria-hidden="true"></i>Add</button>
    <button type="button" @onclick="RefreshData" class="btn btn-sm btn-info"><i class="fa icon-btn fa-refresh" aria-hidden="true"></i>Refresh</button>
</div>

@if (ShowForm)
{
    <Modal OnConfirm="() => ShowModelForm(false)"
           OnCancel="() => ShowModelForm(false)"
           ModelTitle="Create Purchase Order"
           ShowFooter="false"
           Show="ShowForm">
        <OrderForm OnCancel="OnCancelOrder" OnConfirm="OnAddOrder" />
    </Modal>

}

@if (OrderDatas == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table table-striped table-bordered order-table">
        <thead>
            <tr>
                <th class="center-td">Order Id</th>
                <th class="center-td">Product Name</th>
                <th class="center-td">Quantity</th>
                <th class="center-td">Unit Price</th>
                <th class="center-td">Remark</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var order in OrderDatas)
            {
                <tr>
                    <td class="center-td">@order.OrderId</td>
                    <td class="center-td">@order.ProductName</td>
                    <td class="center-td">@order.Quantity</td>
                    <td class="center-td">@order.UnitPrice</td>
                    <td class="center-td">@order.Remark</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    List<OrderDto> OrderDatas;
    bool ShowForm = false;
    protected async override Task OnInitializedAsync()
    {
        await RefreshData();
    }
    private async Task RefreshData()
    {
        await SafeExecAsync(async () =>
        {
            OrderDatas = (await OrderService.GetOrderDataAsync()).ToList();
        }, () =>
        {
            OrderDatas = null;

        });
    }
    private void ShowModelForm(bool value)
    {
        ShowForm = value;
    }
    private async Task OnAddOrder()
    {
        await RefreshData();
        ShowModelForm(false);
        StateHasChanged();
    }
    private Task OnCancelOrder()
    {
        ShowModelForm(false);
        StateHasChanged();
        return Task.CompletedTask;
    }
    private async Task SafeExecAsync(Func<Task> func,Action exceptionCallback=null)
    {
        try
        {
            await func();
        }
        catch(Exception ex)
        {
            exceptionCallback?.Invoke();
            NavigationManager.NavigateTo("error");
        }
    }
}
