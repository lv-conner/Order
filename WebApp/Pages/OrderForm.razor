@using Dto;
@using Services;
@inject IAddOrderService OrderService;
@inject NavigationManager NavigationManager
<EditForm Model="@Model" OnValidSubmit="@AddOrderAsync">
    <DataAnnotationsValidator />
    <div class="form-group">
        <label for="ProdutName">Product Name:</label>
        <InputText id="produtname" @bind-Value="Model.ProductName" class="form-control" aria-describedby="emailHelp" placeholder="Enter Product Name" />
        <ValidationMessage For="@(() => Model.ProductName)" />
    </div>
    <div class="form-group">
        <label for="Quantity">Quantity:</label>
        <InputNumber @bind-Value="Model.Quantity" class="form-control" id="Quantity" />
        <ValidationMessage For="@(() => Model.Quantity)" />
    </div>
    <div class="form-group">
        <label for="UnitPrice">Unit Price:</label>
        <InputNumber @bind-Value="Model.UnitPrice" class="form-control" id="UnitPrice" />
        <ValidationMessage For="@(() => Model.UnitPrice)" />
    </div>
    <div class="form-group">
        <label for="">Remark:</label>
        <InputText @bind-Value="Model.Remark" class="form-control" id="Remark" placeholder="Remark" />
        <ValidationMessage For="@(() => Model.Remark)" />
    </div>
    <div class="form-group order-form-operation">
        <button type="button" @onclick="CancelOrderAsync" class="btn btn-danger btn-order-form" data-dismiss="modal">Cancel</button>
        <button type="submit" class="btn btn-primary">Create Order</button>
    </div>
</EditForm>
@code {
    [Parameter]
    public OrderDto Model { get; set; } = new OrderDto();
    [Parameter]
    public Func<Task> OnCancel { get; set; }
    [Parameter]
    public Func<Task> OnConfirm { get; set; }
    public async Task AddOrderAsync()
    {
        try
        {
            await OrderService.AddOrderAsync(Model);
            if (OnConfirm != null)
            {
                await OnConfirm();
            }
        }
        catch (Exception ex)
        {
            NavigationManager.NavigateTo("error");
        }

    }
    public async Task CancelOrderAsync()
    {
        if (OnCancel != null)
        {
            await OnCancel();
        }
    }
}
